// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  EMPLOYEE
  CUSTOMER
}

enum PAYMENT_STATUS {
  PENDING
  DONE
  REFUND
}

enum STATUS {
  PLACED
  PACKING
  SHIPPING
  DELIVERED
  CANCEL
}

enum PAYMENT_GATEWAY_STATUS {
  SUCCESS
  FAILED
}

model User {
  id         String    @id @default(cuid())
  name       String?
  email      String?
  mobile     String    @unique
  password   String
  role       ROLE      @default(CUSTOMER)
  isVerified Boolean   @default(false)
  createAt   DateTime  @default(now())
  updateAt   DateTime  @updatedAt
  Order      Order[]
  Address    Address[]
}

model Address {
  id       String  @id @default(cuid())
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  location String?
  label    String?
  Order    Order[]
}

model Unit {
  id       String    @id @default(cuid())
  name     String
  fullName String?
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  Product  Product[]
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  imgUrl      String?
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  Product     Product[]
}

model Product {
  id           String         @id @default(cuid())
  name         String
  description  String?
  price        Float
  stock        Int
  imgUrl       String[]
  unit         Unit           @relation(fields: [unitId], references: [id])
  unitId       String
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   String
  createAt     DateTime       @default(now())
  updateAt     DateTime       @updatedAt
  OrderDetails OrderDetails[]
}

model Order {
  id            String         @id @default(cuid())
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  address       Address        @relation(fields: [addressId], references: [id])
  addressId     String
  paymentStatus PAYMENT_STATUS @default(PENDING)
  status        STATUS         @default(PLACED)
  orderDate     DateTime       @default(now())
  deliveryDate  DateTime       @default(now())
  createAt      DateTime       @default(now())
  updateAt      DateTime       @updatedAt
  OrderDetails  OrderDetails[]
  Payment       Payment[]
}

model OrderDetails {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Payment {
  id      String                  @id @default(cuid())
  order   Order                   @relation(fields: [orderId], references: [id])
  orderId String
  amount  Float
  status  PAYMENT_GATEWAY_STATUS?
}
